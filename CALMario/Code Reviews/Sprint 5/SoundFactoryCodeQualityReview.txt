Author of the code review: 
Melinda Studans 

Date of the code review: 
July 18th, 2017

Sprint number: 
5

Name of the .cs file being reviewed: 
SoundFactory.cs

Author of the .cs file being reviewed: 
Lucas Puskaric

Number of minutes taken to complete the review:
15 minutes

Specific comments on code quality:
The class follows the standard design followed in other areas of the project, specifically the factory
classes, where there is a method specifically to load all of the files from the content folder
as well as properties to return each of the different instances that will be
used throughout the game. Overall, the class has a concise and simple structure 
that serves a clear purpose - to handle loading and returning the sound content for the game. 
Furthermore, it is a good design that the ISound interface is being used to return the different
sound effects. Perhaps, the Song class types could be made into a ISong interface, although it is
not entirely necessary at this point in the project.

A hypothetical change to make to the game related to file being reviewed and how the current 
implementation could or could not easily support that change:
Consider the case where we wanted to change the song or sound effect used when Mario
performs a certain action (ex. completes a level). If the song or sound effect is already
present within the SoundFactory class, no change needs to be made. However, even if we 
do add a new sound file to the content folder, very few changes need to be made to SoundFactory - 
adding a property for the sound, loading it within the LoadAllSounds() method, and adding a property
to return the sound effect or song. Perhaps the only drawback is that we would need to know 
where the sound being returned is a Song or part of the ISound interface. 

